MEMORY {
    # First 28 bytes of the zero page are used by NES library

    ZP: start = $00, size = $100, type = rw, define = yes;

    RAM: start = $0200, size = $0600, define = yes;

    HEADER: start = $0, size = $10, file = %O ,fill = yes;
    
    BNK00: start = $6000, size = $2000, file = %O, fill = yes;
    BNK01: start = $6000, size = $2000, file = %O, fill = yes;
    BNK02: start = $6000, size = $2000, file = %O, fill = yes;
    BNK03: start = $6000, size = $2000, file = %O, fill = yes;
    BNK04: start = $6000, size = $2000, file = %O, fill = yes;
    BNK05: start = $6000, size = $2000, file = %O, fill = yes;
    BNK06: start = $6000, size = $2000, file = %O, fill = yes;
    BNK07: start = $6000, size = $2000, file = %O, fill = yes;
    BNK08: start = $6000, size = $2000, file = %O, fill = yes;
    BNK09: start = $6000, size = $2000, file = %O, fill = yes;
    BNK10: start = $6000, size = $2000, file = %O, fill = yes;
    BNK11: start = $6000, size = $2000, file = %O, fill = yes;
    
    PRG: start = $8000, size = $7FFA, file = %O ,fill = yes, define = yes;

    VECTORS: start = $fffa, size = $6, file = %O, fill = yes;

    CHR: start = $0000, size = $4000, file = %O, fill = yes;

}
#BNK09 code size must be under 2K, lower 6K used as RAM buffer. recently played app module

SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    BNK00:    load = BNK00,          type = ro;
    BNK01:    load = BNK01,          type = ro;
    BNK02:    load = BNK02,          type = ro;
    BNK03:    load = BNK03,          type = ro;
    BNK04:    load = BNK04,          type = ro;
    BNK05:    load = BNK05,          type = ro;
    BNK06:    load = BNK06,          type = ro;
    BNK07:    load = BNK07,          type = ro;
    BNK08:    load = BNK08,          type = ro;
    BNK09:    load = BNK09,          type = ro;
    BNK10:    load = BNK10,          type = ro;
    BNK11:    load = BNK11,          type = ro;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = rw;

    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0500; # 5 pages stack
}